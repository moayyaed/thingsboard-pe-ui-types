import { OnDestroy, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { ActivationLinkInfo, ActivationMethod, User } from '@shared/models/user.model';
import { UserService } from '@core/http/user.service';
import { Observable } from 'rxjs';
import { DialogComponent } from '@shared/components/dialog.component';
import { Router } from '@angular/router';
import { GroupEntityTableConfig } from '@home/models/group/group-entities-table-config.models';
import { EntityType } from '@shared/models/entity-type.models';
import { UserComponent } from '@home/pages/user/user.component';
import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { MatStepper } from '@angular/material/stepper';
import { EntityId } from '@shared/models/id/entity-id';
import { EntityInfoData } from '@shared/models/entity.models';
import { EntityGroupInfo } from '@shared/models/entity-group.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { BreakpointObserver } from '@angular/cdk/layout';
import { StepperSelectionEvent } from '@angular/cdk/stepper';
import * as i0 from "@angular/core";
export interface AddUserDialogData {
    entitiesTableConfig: EntityTableConfig<User> | GroupEntityTableConfig<User>;
    tenantId?: string;
}
export declare class AddUserDialogComponent extends DialogComponent<AddUserDialogComponent, User> implements OnInit, OnDestroy {
    protected store: Store<AppState>;
    protected router: Router;
    data: AddUserDialogData;
    dialogRef: MatDialogRef<AddUserDialogComponent, User>;
    private userService;
    private userPermissionsService;
    private breakpointObserver;
    private fb;
    private dialog;
    addUserWizardStepper: MatStepper;
    userComponent: UserComponent;
    isSysAdmin: boolean;
    clazz: string;
    entityType: typeof EntityType;
    selectedIndex: number;
    showNext: boolean;
    labelPosition: string;
    detailsForm: UntypedFormGroup;
    ownerAndGroupsFormGroup: UntypedFormGroup;
    user: User;
    activationMethods: string[];
    activationMethodEnum: typeof ActivationMethod;
    activationMethodTranslations: Map<ActivationMethod, string>;
    activationMethod: ActivationMethod;
    entitiesTableConfig: EntityTableConfig<User> | GroupEntityTableConfig<User>;
    tenantId: string;
    customerId: string;
    entityGroup: EntityGroupInfo;
    groupMode: boolean;
    initialOwnerId: EntityId;
    initialGroups: EntityInfoData[];
    private subscriptions;
    constructor(store: Store<AppState>, router: Router, data: AddUserDialogData, dialogRef: MatDialogRef<AddUserDialogComponent, User>, userService: UserService, userPermissionsService: UserPermissionsService, breakpointObserver: BreakpointObserver, fb: UntypedFormBuilder, dialog: MatDialog);
    ngOnInit(): void;
    ngOnDestroy(): void;
    cancel(): void;
    previousStep(): void;
    nextStep(): void;
    getFormLabel(index: number): string;
    get maxStepperIndex(): number;
    add(): void;
    allValid(): boolean;
    changeStep($event: StepperSelectionEvent): void;
    displayActivationLink(activationLinkInfo: ActivationLinkInfo): Observable<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AddUserDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AddUserDialogComponent, "tb-add-user-dialog", never, {}, {}, never, never, false, never>;
}
