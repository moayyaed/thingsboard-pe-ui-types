import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { CellActionDescriptor, EntityColumn, EntityTableConfig, GroupActionDescriptor, HeaderActionDescriptor } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { CustomerInfo } from '@app/shared/models/customer.model';
import { CustomerService } from '@app/core/http/customer.service';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { UtilsService } from '@core/services/utils.service';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { AllEntitiesTableConfigService } from '@home/components/entity/all-entities-table-config.service';
import { Observable } from 'rxjs';
import { AuthUser } from '@shared/models/user.model';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { AuthState } from '@core/auth/auth.models';
import * as i0 from "@angular/core";
export declare class CustomersTableConfigResolver {
    private allEntitiesTableConfigService;
    private userPermissionsService;
    private customerService;
    private homeDialogs;
    private translate;
    private datePipe;
    private router;
    private store;
    private utils;
    constructor(allEntitiesTableConfigService: AllEntitiesTableConfigService<CustomerInfo>, userPermissionsService: UserPermissionsService, customerService: CustomerService, homeDialogs: HomeDialogsService, translate: TranslateService, datePipe: DatePipe, router: Router, store: Store<AppState>, utils: UtilsService);
    resolve(route: ActivatedRouteSnapshot): Observable<EntityTableConfig<CustomerInfo>>;
    configDefaults(config: EntityTableConfig<CustomerInfo>): void;
    configureColumns(authUser: AuthUser, config: EntityTableConfig<CustomerInfo>): Array<EntityColumn<CustomerInfo>>;
    configureEntityFunctions(config: EntityTableConfig<CustomerInfo>): void;
    configureCellActions(config: EntityTableConfig<CustomerInfo>, authState: AuthState): Array<CellActionDescriptor<CustomerInfo>>;
    configureGroupActions(config: EntityTableConfig<CustomerInfo>): Array<GroupActionDescriptor<CustomerInfo>>;
    configureAddActions(config: EntityTableConfig<CustomerInfo>): Array<HeaderActionDescriptor>;
    private openCustomer;
    manageCustomerUsers($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    manageCustomers($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    manageCustomerAssets($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    manageCustomerDevices($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    manageCustomerEntityViews($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    manageCustomerDashboards($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    manageCustomerEdges($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    private navigateToChildCustomerPage;
    manageOwnerAndGroups($event: Event, customer: CustomerInfo, config: EntityTableConfig<CustomerInfo>): void;
    onCustomerAction(action: EntityAction<CustomerInfo>, config: EntityTableConfig<CustomerInfo>): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomersTableConfigResolver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CustomersTableConfigResolver>;
}
