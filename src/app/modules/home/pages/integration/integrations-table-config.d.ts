import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { Integration, IntegrationInfo, IntegrationParams } from '@shared/models/integration.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { UtilsService } from '@core/services/utils.service';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { IntegrationService } from '@core/http/integration.service';
import { EdgeService } from '@core/http/edge.service';
import { DialogService } from '@core/services/dialog.service';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { PageLink } from '@shared/models/page/page-link';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { DurationLeftPipe } from '@shared/pipe/duration-left.pipe';
import { TbPopoverService } from '@shared/components/popover.service';
import { DestroyRef } from '@angular/core';
export declare class IntegrationsTableConfig extends EntityTableConfig<Integration, PageLink, IntegrationInfo> {
    private integrationService;
    private userPermissionsService;
    private edgeService;
    private translate;
    private datePipe;
    private router;
    private utils;
    private dialogService;
    private dialog;
    private store;
    private durationLeft;
    private popoverService;
    private destroyRef;
    private params;
    readonly integrationDebugPerTenantLimitsConfiguration: string;
    readonly maxDebugModeDurationMinutes: number;
    constructor(integrationService: IntegrationService, userPermissionsService: UserPermissionsService, edgeService: EdgeService, translate: TranslateService, datePipe: DatePipe, router: Router, utils: UtilsService, dialogService: DialogService, dialog: MatDialog, store: Store<AppState>, durationLeft: DurationLeftPipe, popoverService: TbPopoverService, destroyRef: DestroyRef, params: IntegrationParams);
    private isDebugActive;
    private configureEntityTableColumns;
    private configureGroupActions;
    private configureAddActions;
    private configureCellActions;
    private getDebugConfigLabel;
    private saveIntegration;
    openIntegration($event: Event, integration: Integration, params?: IntegrationParams): void;
    onIntegrationAction(action: EntityAction<Integration>, params: IntegrationParams): boolean;
    onOpenDebugConfig($event: Event, { debugSettings, id }: IntegrationInfo): void;
    private onDebugConfigChanged;
    private configureEntityFunctions;
    private configureIntegrationScope;
    private configureTableTitle;
    private assignIntegrationsToEdge;
    private unassignFromEdge;
    private unassignIntegrationsFromEdge;
    private addIntegration;
    private integrationStatus;
    private integrationStatusStyle;
}
