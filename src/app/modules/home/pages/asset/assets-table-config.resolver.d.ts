import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { CellActionDescriptor, EntityColumn, EntityTableConfig, GroupActionDescriptor, HeaderActionDescriptor } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { CustomerService } from '@core/http/customer.service';
import { BroadcastService } from '@core/services/broadcast.service';
import { MatDialog } from '@angular/material/dialog';
import { DialogService } from '@core/services/dialog.service';
import { AssetInfo } from '@app/shared/models/asset.models';
import { AssetService } from '@app/core/http/asset.service';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { UtilsService } from '@core/services/utils.service';
import { AllEntitiesTableConfigService } from '@home/components/entity/all-entities-table-config.service';
import { AuthUser } from '@shared/models/user.model';
import * as i0 from "@angular/core";
export declare class AssetsTableConfigResolver {
    private allEntitiesTableConfigService;
    private store;
    private broadcast;
    private assetService;
    private customerService;
    private dialogService;
    private homeDialogs;
    private translate;
    private datePipe;
    private utils;
    private router;
    private dialog;
    constructor(allEntitiesTableConfigService: AllEntitiesTableConfigService<AssetInfo>, store: Store<AppState>, broadcast: BroadcastService, assetService: AssetService, customerService: CustomerService, dialogService: DialogService, homeDialogs: HomeDialogsService, translate: TranslateService, datePipe: DatePipe, utils: UtilsService, router: Router, dialog: MatDialog);
    resolve(route: ActivatedRouteSnapshot): Observable<EntityTableConfig<AssetInfo>>;
    configDefaults(config: EntityTableConfig<AssetInfo>): void;
    configureColumns(authUser: AuthUser, config: EntityTableConfig<AssetInfo>): Array<EntityColumn<AssetInfo>>;
    configureEntityFunctions(config: EntityTableConfig<AssetInfo>): void;
    configureCellActions(config: EntityTableConfig<AssetInfo>): Array<CellActionDescriptor<AssetInfo>>;
    configureGroupActions(config: EntityTableConfig<AssetInfo>): Array<GroupActionDescriptor<AssetInfo>>;
    configureAddActions(config: EntityTableConfig<AssetInfo>): Array<HeaderActionDescriptor>;
    private openAsset;
    importAssets($event: Event, config: EntityTableConfig<AssetInfo>): void;
    manageOwnerAndGroups($event: Event, asset: AssetInfo, config: EntityTableConfig<AssetInfo>): void;
    onAssetAction(action: EntityAction<AssetInfo>, config: EntityTableConfig<AssetInfo>): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<AssetsTableConfigResolver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AssetsTableConfigResolver>;
}
