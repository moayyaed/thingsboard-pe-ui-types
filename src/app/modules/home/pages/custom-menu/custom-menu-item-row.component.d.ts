import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { AbstractControl, ControlValueAccessor, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validator } from '@angular/forms';
import { CMScope, HomeMenuItemType, MenuItem } from '@shared/models/custom-menu.models';
import { TbPopoverService } from '@shared/components/popover.service';
import { TranslateService } from '@ngx-translate/core';
import { CustomTranslatePipe } from '@shared/pipe/custom-translate.pipe';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { MatButton } from '@angular/material/button';
import { MatDialog } from '@angular/material/dialog';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class CustomMenuItemRowComponent implements ControlValueAccessor, OnInit, OnDestroy, Validator, OnChanges {
    private fb;
    private cd;
    private translate;
    private customTranslate;
    private dialog;
    private popoverService;
    private renderer;
    private viewContainerRef;
    homeMenuItemTypeTranslations: Map<HomeMenuItemType, string>;
    disabled: boolean;
    scope: CMScope;
    showHidden: boolean;
    childDrag: boolean;
    level: number;
    maxIconNameBlockWidth: number;
    hideItems: Observable<void>;
    menuItemRemoved: EventEmitter<any>;
    menuItemRowFormGroup: UntypedFormGroup;
    modelValue: MenuItem;
    isDefaultMenuItem: boolean;
    isHomeMenuItem: boolean;
    isCustomMenuItem: boolean;
    isCustomSection: boolean;
    isCleanupEnabled: boolean;
    iconNameBlockWidth: string;
    itemInfo: string;
    private defaultItemName;
    private defaultMenuSection;
    get itemName(): string;
    get itemNamePlaceholder(): string;
    get pagesDragEnabled(): boolean;
    private propagateChange;
    private hideItemsSubscription;
    constructor(fb: UntypedFormBuilder, cd: ChangeDetectorRef, translate: TranslateService, customTranslate: CustomTranslatePipe, dialog: MatDialog, popoverService: TbPopoverService, renderer: Renderer2, viewContainerRef: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: MenuItem): void;
    validate(_c: UntypedFormControl): {
        invalidMenuItem: boolean;
    };
    edit($event: Event, matButton: MatButton): void;
    cleanup(): void;
    delete(): void;
    pageDrop(event: CdkDragDrop<string[]>): void;
    visiblePagesControls(): Array<AbstractControl>;
    trackByPage(_index: number, pageControl: AbstractControl): any;
    removeCustomPage(index: number): void;
    addCustomPage(): void;
    private afterMenuItemEdit;
    private updateIconNameBlockWidth;
    private updateCleanupState;
    private updateItemInfo;
    private updateModel;
    private pagesFormArray;
    private actualPageIndex;
    private preparePagesFormArray;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomMenuItemRowComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CustomMenuItemRowComponent, "tb-custom-menu-item-row", never, { "disabled": "disabled"; "scope": "scope"; "showHidden": "showHidden"; "childDrag": "childDrag"; "level": "level"; "maxIconNameBlockWidth": "maxIconNameBlockWidth"; "hideItems": "hideItems"; }, { "menuItemRemoved": "menuItemRemoved"; }, never, [".tb-custom-menu-item-row-prefix"], false, never>;
}
