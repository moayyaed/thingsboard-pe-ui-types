import { AfterViewInit, ElementRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { MatAutocomplete } from '@angular/material/autocomplete';
import { MatChipGrid } from '@angular/material/chips';
import { Operation, Resource } from '@shared/models/security.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import * as i0 from "@angular/core";
interface OperationTypeInfo {
    name: string;
    value: Operation;
}
export declare class OperationTypeListComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {
    private store;
    translate: TranslateService;
    private userPermissionsService;
    private fb;
    operationTypeListFormGroup: UntypedFormGroup;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    private groupRoleOperationsValue;
    get groupRoleOperations(): boolean;
    set groupRoleOperations(value: boolean);
    resource: Resource;
    operationTypeInput: ElementRef<HTMLInputElement>;
    operationTypeAutocomplete: MatAutocomplete;
    chipList: MatChipGrid;
    allOperationTypeList: Array<OperationTypeInfo>;
    operationTypeList: Array<OperationTypeInfo>;
    filteredOperationTypeList: Observable<Array<OperationTypeInfo>>;
    placeholder: any;
    secondaryPlaceholder: string;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, userPermissionsService: UserPermissionsService, fb: UntypedFormBuilder);
    updateValidators(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private reset;
    private updateOperationsList;
    private sortOperation;
    private validateOperationList;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: Array<Operation> | null): void;
    add(operationType: OperationTypeInfo): void;
    remove(operationType: OperationTypeInfo): void;
    private notifyValueChanged;
    private checkOperationTypeAll;
    displayOperationTypeFn(operationType?: OperationTypeInfo): string | undefined;
    fetchOperationTypes(searchText?: string): Observable<Array<OperationTypeInfo>>;
    onFocus(): void;
    clear(value?: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OperationTypeListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OperationTypeListComponent, "tb-operation-type-list", never, { "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "groupRoleOperations": { "alias": "groupRoleOperations"; "required": false; }; "resource": { "alias": "resource"; "required": false; }; }, {}, never, never, false, never>;
}
export {};
