import { Injector, NgZone } from '@angular/core';
import { BaseData, HasId } from '@shared/models/base-data';
import { EntityGroupService } from '@core/http/entity-group.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { TelemetryWebsocketService } from '@core/ws/telemetry-websocket.service';
import { TranslateService } from '@ngx-translate/core';
import { UtilsService } from '@core/services/utils.service';
import { DatePipe } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { Router } from '@angular/router';
import { EntityGroupParams } from '@shared/models/entity-group.models';
import { GroupEntityTableConfig } from '@home/models/group/group-entities-table-config.models';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
export declare class GroupConfigTableConfigService<T extends BaseData<HasId>> {
    protected entityGroupService: EntityGroupService;
    protected userPermissionsService: UserPermissionsService;
    protected telemetryWsService: TelemetryWebsocketService;
    protected zone: NgZone;
    protected translate: TranslateService;
    protected utils: UtilsService;
    protected datePipe: DatePipe;
    protected dialog: MatDialog;
    protected homeDialogs: HomeDialogsService;
    protected router: Router;
    protected http: HttpClient;
    protected injector: Injector;
    constructor(entityGroupService: EntityGroupService, userPermissionsService: UserPermissionsService, telemetryWsService: TelemetryWebsocketService, zone: NgZone, translate: TranslateService, utils: UtilsService, datePipe: DatePipe, dialog: MatDialog, homeDialogs: HomeDialogsService, router: Router, http: HttpClient, injector: Injector);
    prepareConfiguration(params: EntityGroupParams, config: GroupEntityTableConfig<T>): Observable<GroupEntityTableConfig<T>>;
    private changeEntitiesOwner;
    private addEntitiesToEntityGroup;
    private moveEntitiesToEntityGroup;
    private removeEntitiesFromEntityGroup;
    private onRowClick;
    private handleDescriptorAction;
    private updateEntityParams;
    private addGroupEntity;
    private getColumnProperty;
    private toEntityColumn;
    private cellStyle;
    private cellContent;
    private defaultContent;
    static ɵfac: i0.ɵɵFactoryDeclaration<GroupConfigTableConfigService<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GroupConfigTableConfigService<any>>;
}
