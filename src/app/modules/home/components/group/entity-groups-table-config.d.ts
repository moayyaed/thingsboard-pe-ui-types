import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { EntityGroupInfo, EntityGroupParams } from '@shared/models/entity-group.models';
import { EntityGroupService } from '@core/http/entity-group.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { UtilsService } from '@core/services/utils.service';
import { Router } from '@angular/router';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { EntityType } from '@shared/models/entity-type.models';
import { MatDialog } from '@angular/material/dialog';
import { CustomTranslatePipe } from '@shared/pipe/custom-translate.pipe';
export declare class EntityGroupsTableConfig extends EntityTableConfig<EntityGroupInfo> {
    private entityGroupService;
    private userPermissionsService;
    private translate;
    private datePipe;
    private utils;
    private router;
    private dialog;
    private homeDialogs;
    private customTranslate;
    private params;
    edgeId: string;
    groupType: EntityType;
    shared: boolean;
    constructor(entityGroupService: EntityGroupService, userPermissionsService: UserPermissionsService, translate: TranslateService, datePipe: DatePipe, utils: UtilsService, router: Router, dialog: MatDialog, homeDialogs: HomeDialogsService, customTranslate: CustomTranslatePipe, params: EntityGroupParams);
    private updateActionCellDescriptors;
    private entityGroupWizard;
    private assignEntityGroupsToEdge;
    private share;
    private makePublic;
    private makePrivate;
    onGroupUpdated(closeDetails?: boolean): void;
    private notifyEntityGroupUpdated;
    private open;
    private unassignEntityGroupFromEdge;
    private unassignEntityGroupsFromEdge;
    private onEntityGroupAction;
    private isEdgeGroup;
}
